# eeuezconsulting_app/financial_app/models.py

from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver

# Extending the User model with additional financial profile information
class UserProfile(models.Model):
    """
    Extends the built-in Django User model with specific financial profile data.
    Each User will have a unique UserProfile.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    financial_goal = models.CharField(max_length=255, blank=True, null=True,
                                      help_text="e.g., 'Save for a down payment', 'Pay off debt'")
    risk_tolerance = models.CharField(
        max_length=50,
        choices=[
            ('low', 'Low'),
            ('medium', 'Medium'),
            ('high', 'High')
        ],
        default='medium',
        help_text="User's comfort level with financial risk"
    )
    date_of_birth = models.DateField(blank=True, null=True)
    occupation = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f'{self.user.username}\'s Profile'

# Signal to create or update UserProfile when a User is created or saved
@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)
    instance.profile.save()


# Model for tracking daily income
class Income(models.Model):
    """
    Represents an income entry for a specific user.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='incomes')
    amount = models.DecimalField(max_digits=10, decimal_places=2, help_text="Amount of income")
    source = models.CharField(max_length=255, help_text="e.g., 'Salary', 'Freelance', 'Gift'")
    date = models.DateField(auto_now_add=True, help_text="Date when the income was recorded")
    description = models.TextField(blank=True, null=True, help_text="Optional description of the income")

    def __str__(self):
        return f'{self.user.username} - Income: {self.amount} from {self.source} on {self.date}'

    class Meta:
        ordering = ['-date'] # Order by most recent income first

# Model for tracking daily expenses
class Expense(models.Model):
    """
    Represents an expense entry for a specific user.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='expenses')
    amount = models.DecimalField(max_digits=10, decimal_places=2, help_text="Amount of expense")
    category = models.CharField(max_length=255, help_text="e.g., 'Food', 'Rent', 'Transport', 'Utilities'")
    date = models.DateField(auto_now_add=True, help_text="Date when the expense was recorded")
    description = models.TextField(blank=True, null=True, help_text="Optional description of the expense")

    def __str__(self):
        return f'{self.user.username} - Expense: {self.amount} for {self.category} on {self.date}'

    class Meta:
        ordering = ['-date'] # Order by most recent expense first

# Model for tailored financial recommendations
class Recommendation(models.Model):
    """
    Stores financial recommendations tailored for users.
    These could be generated by the app's logic or manually added by an admin.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='recommendations')
    title = models.CharField(max_length=255, help_text="Title of the recommendation")
    content = models.TextField(help_text="Detailed content of the financial recommendation")
    date_created = models.DateTimeField(auto_now_add=True, help_text="Date and time the recommendation was created")
    is_read = models.BooleanField(default=False, help_text="True if the user has read this recommendation")

    def __str__(self):
        return f'Recommendation for {self.user.username}: {self.title}'

    class Meta:
        ordering = ['-date_created'] # Order by most recent recommendation first

# Model for managing personal and financial projects
class Project(models.Model):
    """
    Represents a personal or financial project a user is working on,
    e.g., saving for a car, vacation, or starting a business.
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='projects')
    name = models.CharField(max_length=255, help_text="Name of the project (e.g., 'New Car Fund')")
    description = models.TextField(blank=True, null=True, help_text="Detailed description of the project")
    target_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True,
                                         help_text="The total amount of money targeted for this project")
    current_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00,
                                          help_text="Current amount saved towards the project")
    start_date = models.DateField(auto_now_add=True, help_text="Date when the project was started")
    due_date = models.DateField(null=True, blank=True, help_text="Optional target completion date")
    is_completed = models.BooleanField(default=False, help_text="True if the project has been completed")

    def __str__(self):
        return f'{self.user.username} - Project: {self.name}'

    class Meta:
        ordering = ['due_date', 'is_completed'] # Order by due date, then completion status

# Model for financial education modules
class EducationModule(models.Model):
    """
    Represents a financial education module, potentially retrieved from EHBLO.
    We store a local reference or cache.
    """
    title = models.CharField(max_length=255, help_text="Title of the education module")
    description = models.TextField(blank=True, null=True, help_text="Short description of the module")
    ehblo_link = models.URLField(blank=True, null=True,
                                 help_text="URL to the original module on the EHBLO partner platform")
    content = models.TextField(blank=True, null=True,
                               help_text="Cached content of the module (optional, for offline access/speed)")
    date_published = models.DateField(auto_now_add=True, help_text="Date the module was published or added")

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['-date_published'] # Order by most recent module first